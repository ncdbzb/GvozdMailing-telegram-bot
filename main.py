import config
import logging

from aiogram import Bot, Dispatcher, executor, types
from db import Database

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)
db = Database('database.db')

startMarkup = types.InlineKeyboardMarkup(row_width=1)
startButton = types.InlineKeyboardButton(text='–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', callback_data='startBtn')
tg1 = types.InlineKeyboardButton(text='Gvozdüî© –ø–ª–∞–≥–∏–Ω—ã –∏ –∫–∏—Ç—ã', url=config.urls[0])
tg2 = types.InlineKeyboardButton(text='Gvozd üî© VST Plugins', url=config.urls[1])

startMarkup.row(tg1, tg2)
startMarkup.add(startButton)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ, —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ 2 —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞ "
                         "–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>\"–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å\"</b>",
                         reply_markup=startMarkup, parse_mode='html')


async def check(channels, user_id):
    for channel in channels:
        user_channel_status = await bot.get_chat_member(chat_id=channel, user_id=user_id)
        if user_channel_status["status"] == 'left':
            return False
    return True


@dp.callback_query_handler(text='startBtn')
async def start(message: types.Message):
    if db.user_exists(message.from_user.id):
        if await check(config.channels, message.from_user.id):
            db.set_active(message.from_user.id, 1)
            await bot.send_message(message.from_user.id, '–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!'
                                                         ' –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /unsub')
        else:
            db.set_active(message.from_user.id, 0)
            await bot.send_message(message.from_user.id, '–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±–∞ —Ç–µ–ª–µ–≥—Ä–∞–º'
                                                         ' –∫–∞–Ω–∞–ª–∞ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑!', reply_markup=startMarkup)
    else:
        flag = message.from_user.username
        username = flag if flag else message.from_user.first_name
        db.add_user(message.from_user.id)
        db.set_username(message.from_user.id, username)
        if await check(config.channels, message.from_user.id):
            await bot.send_message(message.from_user.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ! "
                                                         " –ï—Å–ª–∏ —Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—à—å –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–ø–∏—à–µ—à—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–æ–≤, —Ç—ã "
                                                         "–±—É–¥–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—É—Ä—Å–∞."
                                                         " –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /unsub")
        else:
            db.set_active(message.from_user.id, 0)
            await bot.send_message(message.from_user.id, '–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±–∞ —Ç–µ–ª–µ–≥—Ä–∞–º'
                                                         ' –∫–∞–Ω–∞–ª–∞ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑!', reply_markup=startMarkup)


@dp.message_handler(commands=['unsub'])
async def unsub(message: types.Message):
    if db.user_exists(message.from_user.id):
        db.set_active(message.from_user.id, 0)
        await message.reply('–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ')
    else:
        await message.reply('–í—ã –∏ —Ç–∞–∫ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ')


@dp.message_handler(commands=['sendall'])
async def sendall(message: types.Message):
    if message.from_user.id == config.admin_id:
        text = message.text[9:]
        for row in db.get_users():
            if int(row[1]) == 1:
                try:
                    await bot.send_message(row[0], text)
                    # if int(row[1]) != 1:
                    #     db.set_active(row[0], 1)
                except:
                    db.set_active(row[0], 0)

        await bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


@dp.message_handler(commands=['getxlsx'])
async def sendall(message: types.Message):
    if message.from_user.id == config.admin_id:
        db.get_xlsx()
        await message.reply_document(open('result.xlsx', 'rb'))


@dp.message_handler()
async def send_error(message: types.Message):
    await message.reply('–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç—É, –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
